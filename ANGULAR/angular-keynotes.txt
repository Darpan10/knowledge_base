Angular key NOTES :

attribute vs properties binding in angular :

- Attributes define the initial state of an element in the HTML markup.

- Properties represent the current state or behavior of an element in the DOM after it has been rendered.

- Changes to attributes don't automatically reflect in properties, but changes to properties are reflected in the DOM and might affect behavior or appearance.




===============================================================================================================================




These are all major built-in directives in Angular:


Structural Directives: *ngFor, *ngIf, *ngSwitch, *ngSwitchCase, *ngSwitchDefault, *ngIf...else

Attribute Directives: ngClass, ngStyle, ngModel, ngModelGroup, ngContent, ngContainer, ngTemplateOutlet

Event Binding Directives: (click), #templateReference

Form Directives: formControl, formGroup, formArray, formControlName, ngSubmit

Miscellaneous Directives: ngIf...as, ngTemplateOutlet




----------------------------------------------------------------------------------------------------------------------------

=====> DIRECTIVES


1. Structural Directives (used to change the structure of the DOM)

*ngFor


Purpose: Loops through an array or collection.

Example:

html
Copy
<ul>
  <li *ngFor="let item of items">{{ item }}</li>
</ul>
This renders a list of items by iterating over the array.





*ngIf
Purpose: Conditionally includes an element in the DOM based on an expression.

Example:

html
Copy
<div *ngIf="isVisible">This is visible only if isVisible is true.</div>
The content inside <div> will only be rendered if isVisible is true.

*ngIf...else
Purpose: Shows one template if the condition is true and another template if false.

Example:

html
Copy
<div *ngIf="isVisible; else elseTemplate">Visible Content</div>
<ng-template #elseTemplate><p>Hidden Content</p></ng-template>
The elseTemplate is shown if isVisible is false.








*ngSwitch
Purpose: Acts like a switch statement; conditionally display elements based on the value of an expression.

Example:

html
Copy
<div [ngSwitch]="value">
  <p *ngSwitchCase="'one'">First case</p>
  <p *ngSwitchCase="'two'">Second case</p>
  <p *ngSwitchDefault>Default case</p>
</div>
Based on the value of value, the corresponding content is shown.







-----------------------------------------------------------------------------------------------------------------------
2. Attribute Directives (used to change the appearance or behavior of an element)




*ngClass

Purpose: Adds/removes CSS classes dynamically.

Example:

html
Copy
<div [ngClass]="{ 'highlight': isHighlighted }">Text</div>
The highlight class will be added if isHighlighted is true.

ngStyle
Purpose: Dynamically sets CSS styles on an element.

Example:

html
Copy
<div [ngStyle]="{ 'color': textColor, 'font-size': fontSize + 'px' }">Styled text</div>
The color and font-size are dynamically set based on the componentâ€™s properties.







*ngModel
Purpose: Two-way data binding for forms (often used in input elements).

Example:

html
Copy
<input [(ngModel)]="name" placeholder="Enter your name">
<p>Your name is: {{ name }}</p>
The input value is bound to the name property, updating in both directions.










*ngModelGroup
Purpose: Used to group multiple form controls into one logical unit in a form.

Example:

html
Copy
<form [formGroup]="userForm">
  <div formGroupName="address">
    <input formControlName="street">
    <input formControlName="city">
  </div>
</form>
The inputs for street and city are grouped together in the address group.








*ngContent
Purpose: Used for content projection (placing content inside a component).

Example:

html
Copy
<app-card>
  <div>Content inside the card</div>
</app-card>

<!-- Inside app-card component -->
<div class="card">
  <ng-content></ng-content>
</div>
The content inside <app-card> is projected into the ng-content placeholder inside the app-card component.











-------------------------------------------------------------------------------------------------------------------------

3. Event Binding and Template Reference Directives
*(click)
Purpose: Event binding to call a method when an event is triggered.

Example:

html
Copy
<button (click)="showMessage()">Click me</button>
Calls the showMessage() method when the button is clicked.

#templateReference
Purpose: Creates a reference to a DOM element or a component for accessing its properties or methods.

Example:

html
Copy
<input #userInput>
<button (click)="logInput(userInput.value)">Log Input</button>
The value of the input is accessed using the template reference variable #userInput.










----------------------------------------------------------------------------------------------------------------------









4. Built-in Directives for Forms



*formControl

Purpose: Used for binding an individual form control to a DOM element.

Example:

html
Copy
<input [formControl]="nameControl">
Binds an individual form control (nameControl) to an input field.













*formGroup
Purpose: Groups multiple form controls into one logical unit.

Example:

html
Copy
<form [formGroup]="userForm">
  <input formControlName="name">
  <input formControlName="email">
</form>
Binds form controls like name and email to the userForm.











----------------------------------------------------------------------------------------------------------------
5. ngIf with as (Angular 2+)
Purpose: Alias for values in a conditional structure.

Example:

html
Copy
<div *ngIf="items as allItems; else noItems">
  <p>Items length: {{ allItems.length }}</p>
</div>
<ng-template #noItems><p>No items available</p></ng-template>
Using as to create an alias for items inside the *ngIf block.


*ngIf is a structural directive in Angular that adds or removes HTML elements from the DOM based on a condition.


<button (click)="toggleTextVisibility()">Toggle Text Visibility</button>
<p *ngIf="showText">This is a paragraph that can be shown or hidden.</p>


=>>>>>>>>>>remove <p> tag on click as above












----------------------------------------------------------------------------------------------------------------

types of binding in angular :

Summary of Angular Binding Types:

Interpolation Binding: {{ expression }}

Property Binding: [property]="expression"

Event Binding: (event)="expression"

Two-Way Binding: [(ngModel)]="property"

Class Binding: [class.className]="condition"

Style Binding: [style.property]="expression"

Attribute Binding: [attr.attribute]="expression"

Structural Directives: *ngIf, *ngFor, etc.

ngClass Directive: [ngClass]="{ className: condition }"

ngStyle Directive: [ngStyle]="{ styleName: value }"

===============================================================================================================================


1. Interpolation Binding ({{ }})
html
Copy
<h1>{{ title }}</h1>
This binds the title property in the component to the <h1> element.



2. Property Binding ([property])
html
Copy
<img [src]="imageUrl">
This binds the src property of the <img> element to the imageUrl property in the component.




3. Event Binding ((event))
html
Copy
<button (click)="onClick()">Click Me</button>
This binds the click event of the button to the onClick() method in the component.




4. Two-Way Binding ([(ngModel)])
html
Copy
<input [(ngModel)]="name">
This creates two-way data binding between the input element and the name property in the component.




5. Class Binding ([class.className])
html
Copy
<div [class.active]="isActive">This div is conditionally active.</div>
This applies the active class to the div if isActive is true.




6. Style Binding ([style.styleName])
html
Copy
<div [style.background-color]="bgColor">This div has a dynamic background.</div>
This dynamically sets the background-color style based on the bgColor property in the component.




7. Attribute Binding ([attr.attribute])
html
Copy
<a [attr.href]="linkUrl">Click Here</a>
This binds the href attribute of the anchor tag to the linkUrl property in the component.




8. *Structural Directives (ngIf)
html
Copy
<p *ngIf="isVisible">This paragraph is conditionally visible.</p>
This shows or hides the paragraph depending on the isVisible boolean property.




9. ngClass Directive
html
Copy
<div [ngClass]="{ 'active': isActive, 'highlighted': isHighlighted }">This div has dynamic classes.</div>
This applies the active and highlighted classes based on the isActive and isHighlighted boolean properties.




10. ngStyle Directive
html
Copy
<div [ngStyle]="{ 'color': textColor, 'font-size': fontSize + 'px' }">This div has dynamic styles.</div>
This dynamically sets the color and font-size styles based on the textColor and fontSize properties in the component.